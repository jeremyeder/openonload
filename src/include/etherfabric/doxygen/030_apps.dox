/****************************************************************************
 * Copyright 2004-2005: Level 5 Networks Inc.
 * Copyright 2005-2015: Solarflare Communications Inc,
 *                      7505 Irvine Center Drive, Suite 100
 *                      Irvine, CA 92618, USA
 *
 * Maintained by Solarflare Communications
 *  <linux-xen-drivers@solarflare.com>
 *  <onload-dev@solarflare.com>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, incorporated herein by reference.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 ****************************************************************************
 */

/**************************************************************************\
*//*! \file
** \author    Solarflare Communications, Inc.
** \brief     Additional Doxygen-format documentation for ef_vi.
** \date      2015/02/14
** \copyright Copyright &copy; 2015 Solarflare Communications, Inc. All
**            rights reserved. Solarflare, OpenOnload and EnterpriseOnload
**            are trademarks of Solarflare Communications, Inc.
*//*
\**************************************************************************/

/**************************************************************************
 * Example Applications page
 *************************************************************************/
/*! \page applications Example Applications

Solarflare %ef_vi comes with a range of example applications - including
source code and make files. This is a quick guide to using them, both for
testing %ef_vi's effectiveness in an environment, and as starting points
for developing applications.

Not all of these applications are available in the current Onload
release; but source code is available on request.

Most of these applications have additional options to test physical
addressing mode, or hardware timestamping. Run with "--help" to check this.

| Application           | Description
| :-------------------- | :------------------------------------------------
| \ref efforward        | Forward packets between two interfaces without modification.
| \ref efpingpong       | Ping a simple message format between two interfaces.
| \ref efpio            | Pingpong application that uses Programmed I/O.
| \ref efrss            | Forward packets between two interfaces without modification, spreading the load over multiple virtual interfaces and threads.
| \ref efsink           | Receives streams of packets on a single interface.
| \ref efsink_packed    | Receives streams of packets on a single interface using packed streams.
| \ref efsocketpingpong | Ping a simple message format between two interfaces using sockets.
| \ref eftap            | Sends and receive UDP packets on a single interface.

\section efforward efforward

The efforward application listens for traffic on one interface and echoes 
it out of a second; and vice versa. It demonstrates a very simple 
high-performance bridge.

Some route configuration on the clients might be necessary to get this 
working, but it is a very simple example, and is very easy to start adding 
packet re-writing rules etc.

Although this is a viable starting point for a bridging application, a 
better option might be the SolarCapture API, which includes a more 
complete pre-made bridging application.

\section efpingpong efpingpong

The efpingpong application echoes a single packet back and forth 
repeatedly, measuring the round-trip time.

This is the most useful example application for testing lowest possible 
latency. It is not a very good sample for building an application, because:
- it uses only one filter
- it operates knowing that there is only ever a single packet on the wire,
  and so:
  - does not need to refill the rings
  - does not handle multiple event types.

\subsection efpingpong_usage Usage

__Server:__ <code>efpingpong pong _server-eth_ _server-ip_ _server-port_ 
_client-mac_ _client-ip_ _client-port_</code>

__Client:__ <code>efpingpong ping _client-eth_ _client-ip_ _client-port_ 
_server-mac_ _server-ip_ _server-port_</code>

where:
- _server-eth_ and _client-eth_ are the interfaces on the server and
  client machines (e.g. `eth0`)
- _server-port_ and _client-port_ are port numbers of your choosing on the
  server and client machines (e.g. `9587`)
- _server-ip_ and _client-ip_ are the IP addresses of the server and
  client machines (e.g. `192.168.0.10`)
- _server-mac_ and _client-mac_ are the MAC addresses of the server and
  client machines (e.g. `12:34:56:78:90:AB`)

\section efpio efpio

The efpio application is a variant of \ref efpingpong, which demonstrates 
the use of PIO for sending. This application requires a 7000-series card 
that supports PIO.

Usage is the same as \ref efpingpong.

\section efrss efrss

The efrss application is ai variant of \ref efforward. It demonstrates 
automatically spreading the load over multiple threads, using a vi_set and 
RSS.

\section efsink efsink

The efsink application is a demonstration of capturing packets, and the 
flexibility of filters.

It supports all filter types that %ef_vi supports. By default it just 
reports the amount of data captured, but it also demonstrates simple 
actions upon the packet data, with the option to hexdump incoming packets.

It is a very useful jumping off point as it shows:
- creation of a virtual interface
- creation and installation of filters
- polling the event queue.

However, it does not cover:
- sending packets
- putting ring buffer management in a separate thread from packet 
  processing, which is best practice for a full application.

\section efsink_packed efsink_packed

The efsink_packed application is a variant of \ref efsink that 
demonstrates usage of the packed-stream firmware.

\section efsocketpingpong efsocketpingpong

The efsocketpingpong application is another variation on \ref efpingpong. 
It demonstrates mixed use of sockets and %ef_vi. It can show the 
difference as %ef_vi is enabled on each of the four endpoints of a 
round-trip.

Usage is the same as \ref efpingpong.

\section eftap eftap

The eftap application is a traffic generator. It waits for completion of a 
send, and then sends another packet; so it does not burst as fast as is 
possible; but it's a good demonstration of how to transmit, and how to 
retrieve the hardware timestamps.

\section building Building the Example Applications

The %ef_vi example applications are built along with the Onload 
installation and will be present in the 
`/Onload-&lt;version>/build/gnu_x86_64/tests/ef_vi` subdirectory.  In the 
  build directory there will be `gnu`, `gnu_x86_64`, 
  `x86_64_linux-&lt;kernel version>` directories:
- files under the `gnu` directory are 32-bit (if these are built)
- files under the `gnu_x86_64` directory are 64-bit.

Source code files for the example applications exist in the 
`/Onload-&lt;version>/src/tests/ef_vi` subdirectory.

To rebuild the example applications you must have the 
`Onload-&lt;version>/scripts` subdirectory in your path and use the 
following procedure:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.sh}
[root@server01 Onload-201109]# cd scripts/
[root@server01 scripts]# export PATH="$PWD:$PATH"
[root@server01 scripts]# cd ../build/_gnu_x86_64/tests/ef_vi/
[root@server01 ef_vi]# make clean
[root@serverr01 ef_vi]# make
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*/