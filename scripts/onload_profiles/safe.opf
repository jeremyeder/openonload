# OpenOnload "safe" profile.
#
# With this profile, Onload shows a small difference with Linux Socket API
# as possible.  Changing the Onload variables below might give you better
# performance or latency, but might also break something important.
#
# This profile is not intended for production use.  Please create your own
# profile based on it, by changing/removing variables if it does not
# break your application and improves its latency/performance
# characteristics.
#
# Latency profile is completely compatible with this "safe" profile,
# feel free to use them together if needed.

####### multithreading
# Mutlithreading or changing file descriptors from signal handlers
onload_set EF_FDS_MT_SAFE 0
onload_set EF_EPOLL_MT_SAFE 0


####### poll(), select()
# Always check non-onloaded file descriptors in poll and select functions
onload_set EF_SELECT_FAST 0
onload_set EF_POLL_FAST 0
# And even if you turn off the lines above, ensure that non-onloaded file
# descriptor are checked when there are no events on the onloaded ones.
onload_set EF_POLL_FAST_USEC 0
onload_set EF_SELECT_FAST_USEC 0

# Non-blocking poll() and select() should tell everything.
onload_set EF_POLL_NONBLOCK_FAST_USEC 0
onload_set EF_SELECT_NONBLOCK_FAST_USEC 0


####### epoll_wait()
# epoll1 has a lot of limitations, see the manual for details
onload_set EF_UL_EPOLL 2
# Do not postpone epoll_ctl
onload_set EF_EPOLL_CTL_FAST 0
# next is epoll1-specific, but let's include it here
onload_set EF_EPOLL_CTL_HANDOFF 0

####### TCP: SO_SNDBUF, SO_RCVBUF
# Properly count packets in TCP queues
onload_set EF_TCP_SNDBUF_MODE 1
onload_set EF_TCP_RCVBUF_STRICT 1


####### IP_MULTICAST_LOOP
# Do not accelerate multicast in presence of IP_MULTICAST_LOOP
# IP_MULTICAST_LOOP socket option is on by default on Linux, so the setting
# below turns Onload acceleration off for almost any multicast application,
# even if it does not care about IP_MULTICAST_LOOP socket option.
onload_set EF_FORCE_SEND_MULTICAST 0


####### non-blocking send() + no packet buffers
# There is some contraversy here.
# Imagine that a socket was marked as writable by poll() and the
# application calls non-blocking send(), but there are no packets in
# this Onload stack.
#
# If EF_TCP_SEND_NONBLOCK_NO_PACKETS_MODE=0, the non-blocking send() might
# block.  It happens with Linux without Onload in case of lack of memory;
# however the system at this time is just unusable (before out of memory
# killer comes and kills the most important application).
# In Onload case, the system is pretty usable; the application could, for
# example, read data from a socket and the packets will be freed.
#
# If EF_TCP_SEND_NONBLOCK_NO_PACKETS_MODE=1, the non-blocking send() might
# return -1 with errno=ENOBUFS.  Again, it happens without Onload.  For
# example, Linux returns -1 with errno=ENOBUFS if it can not allocate a new
# ARP entry.
#
# So, EF_TCP_SEND_NONBLOCK_NO_PACKETS_MODE=1 looks more safe.
onload_set EF_TCP_SEND_NONBLOCK_NO_PACKETS_MODE 1
